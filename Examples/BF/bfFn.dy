-- This example implements a "refunctionalized" version of `bf.dy`.
-- BF instructions are represented directly as functions of the form
-- `Tape -> IO Tape`, rather than being represented via differentt
-- constructors, which are later evaluated.

reverse =
  let go acc = \case
    | [] -> acc
    | a :: as -> go (a :: acc) as
  in
  go []
and

head (a :: _) = a and
tail (_ :: as) = as and

incr tape@{..} = pure { left, crr = wrap (crr + 1), right } and
decr tape@{..} = pure { left, crr = wrap (crr - 1), right } and
movL tape@{..} = pure { left = tail left, crr = head left, right = crr :: right } and
movR tape@{..} = pure { left = crr :: left, crr = head right, right = tail right } and
read tape@{..} = getChar >>= \c. pure { left, crr = charToNum c, right } and
write tape@{..} =  putChar (numToChar crr) *> pure tape and

loop ops tape@{..} =
  case crr of
  | 0 -> pure tape
  | _ -> evalOps ops tape >>= loop ops
and

evalOps ops tape@{..} =
  case ops of
  | [] -> pure tape
  | op :: ops -> op tape >>= evalOps ops
and

parse =
  let go scope stack = \case
    | [] ->
      ( case stack of
        | [] -> reverse scope
        | _ -> Exception "Ummatched '['."
      )
    | '+' :: cs -> go (incr :: scope) stack cs
    | '-' :: cs -> go (decr :: scope) stack cs
    | '<' :: cs -> go (movL :: scope) stack cs
    | '>' :: cs -> go (movR :: scope) stack cs
    | ',' :: cs -> go (read :: scope) stack cs
    | '.' :: cs -> go (write :: scope) stack cs
    | '[' :: cs -> go [] (scope :: stack) cs
    | ']' :: cs ->
      ( case stack of
        | [] -> Exception "Unmatched ']'."
        | parent :: stack -> go (loop (reverse scope) :: parent) stack cs
      )
    | _ :: cs -> go scope stack cs
  in
  go [] []
and

zeros = 0 :: zeros and
tape = { left = zeros, crr = 0, right = zeros } and

wrap = \case
  | 256 -> 0
  | -1 -> 255
  | n -> n
and

eval ops = evalOps ops tape *> pure () and

main = (head <$> getArgs) >>= readFile >>= (parse; eval)

-- Self-recursive binding
fac = \n.
  match n
  | 0 -> 1
  | n: Num -> n * fac (n - 1)
and

-- With fixed points
fac' = \f n.
  match n
  | 0 -> 1
  | n: Num -> n * f (n - 1)
and

-- Haskell-style `fix`
fix = \f. let x = f x in x and
facF = fix fac' and

-- Y combinator
y = \f. (\x. f (x x)) (\x. f (x x)) and
facY = y fac' and

main =
  print (fac 100) *>
  print (facF 100) *>
  print (facY 100)

main =
  let take (n: Num) l =
    match (n, l)
    | (0, _) -> []
    | (_, []) -> []
    | (n, a :: as) -> a :: take (n - 1) as
  in

  let a = 1 :: a in
  print (take 20 a) *>

  let if b t f =
    match b
    | True -> t
    | False -> f
  in

  let (..) (a: Num) (b: Num) =
    if (a == b)
      [a]
      (if (a < b)
        (a :: (a + 1 .. b))
        (a :: (a - 1 .. b)))
  in
  print (1 .. 10) *>
  print (10 .. 1) *>

  let map (f: Fn) l =
    match l
    | [] -> []
    | a :: as -> f a :: map f as
  in
  print (map ((+) 2) (1 .. 100)) *>

  -- Mutual recursion
  let a = 1 :: b
  and b = 2 :: a
  in print (take 20 a)

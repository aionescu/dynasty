module Core.IO.Ref

import Core.IO

mkRef a = unsafejs "({r:()=>({c:_a})})" and
readRef r = unsafejs "({r:()=>e(e(_r).c)})" and
writeRef r a = unsafejs "({r:()=>{e(_r).c=_a;return{$:'Tuple'}}})" and
updateRef r f = unsafejs "({r:()=>{const r=e(_r),c=r.c;r.c={f:()=>e(_f)(c)};return{$:'Tuple'}}})" and
updateRef' r f = unsafejs "({r:()=>{const r=e(_r);r.c={v:e(_f)(r.c)};return{$:'Tuple'}}})"

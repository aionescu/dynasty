module Dynasty.Prelude

(+) a b = unsafejs "e(_a)+e(_b)" and
(-) a b = unsafejs "e(_a)-e(_b)" and
(*) a b = unsafejs "e(_a)*e(_b)" and
(/) a b = unsafejs "e(_a)/e(_b)" and
(%) a b = unsafejs "e(_a)%e(_b)" and
(==) a b = unsafejs "({$:e(_a)===e(_b)?'True':'False'})" and
(<) a b = unsafejs "({$:e(_a)<e(_b)?'True':'False'})" and

length a = unsafejs "e(_a).length" and
(!) a i = unsafejs "e(_a)[e(_i)]" and

pure a = unsafejs "({r:()=>e(_a)})" and
(>>=) a f = unsafejs "({r:()=>e(_f)({v:e(_a).r()}).r()})" and
(*>) a b = a >>= \_ -> b and

show a = unsafejs "show(e(_a),false)" and
putStrLn a = unsafejs "({r:()=>{console.log(e(_a));return{$:'Tuple'};}})" and
print a = putStrLn (show a) and

throw a = unsafejs "{throw e(_a).toString()}" and
try a h = unsafejs "{try{return e(_a);}catch(c){return e(_h)({v:c.toString()});}}" and
tryIO a h = unsafejs "({r:()=>{try{return e(_a).r();}catch(c){return e(e(_h)({v:c.toString()})).r()}}})" and

attempt a = unsafejs "{try{e(_a);return{$:'Just',$0:_a};}catch(c){return{$:'Nothing'}}}" and

fromCharCode a = unsafejs "String.fromCharCode(e(_a))" and
toCharCode a = unsafejs "e(_a).charCodeAt(0)" and

($) f x = f x and
(.) f g x = f (g x) and
(;) f g x = g (f x) and

if b t e =
  case b of
  | True -> t
  | False -> e

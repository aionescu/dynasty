module BF

import Core.Bool
import Core.Function
import Core.IO
import Core.IO.NodeAPI
import Core.Math
import Core.Seq
import Core.String

incr k c = k $! (c + 1) .&. 255 and
decr k c = k $! (c - 1) .&. 255 and
movL k c (h :: t) r = k h t (c :: r) and
movR k c l (h :: t) = k h (c :: l) t and
read k _ l r = getChar >>= \c -> (k $! toCharCode c) l r and
write k c l r = putChar (fromCharCode c) *> k c l r and
loop o k =
  let go = \case
    | 0 -> k 0
    | c -> o go c
  in go
and

parse s =
  let len = length s
  and go l o i k =
    if (i == len) (if l (throw "Unmatched [") $ k o i)
      case s ! i of
      | "+" -> go l (o . incr) (i + 1) k
      | "-" -> go l (o . decr) (i + 1) k
      | "<" -> go l (o . movL) (i + 1) k
      | ">" -> go l (o . movR) (i + 1) k
      | "," -> go l (o . read) (i + 1) k
      | "." -> go l (o . write) (i + 1) k
      | "[" -> go True id (i + 1) \o' i -> go l (o . loop o') i k
      | "]" -> if l (k o $ i + 1) $ throw "Unmatched ]"
      | _ -> go l o (i + 1) k
  in go False id 0 \o _ -> o
and

zeros = 0 :: zeros and

main =
  do   [file] <- getArgs
  then code <- readFile file
  then parse code (\_ _ _ -> pure ()) 0 zeros zeros

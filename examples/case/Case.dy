module Case

import Core.Function
import Core.IO

f = \case
  | 0 -> ("is 0", ())
  | (a, 2) -> ("is tuple", a)
  | y@{ x } -> ("is record", x, y)
  | Some ([2, x]) -> ("is Some", x)
  | v'@NaN -> ("is NaN", { v' })
  | Infinity -> ("is Infinity", { })
  | -Infinity -> { is = "-Infinity" }
and

main =
  traverse (print . f)
  [ 0
  , (1, 2)
  , { x = 10 }
  , Some [2, 20]
  , NaN
  , Infinity
  , -Infinity
  ]

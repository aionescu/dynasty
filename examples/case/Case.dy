module Case

import Core.IO
import Core.List

f = \case
  | 0 -> ("is 0", ())
  | (a, 2) -> ("is tuple", a)
  | y@{ x } -> ("is record", x, y)
  | Some ([2, x]) -> ("is Some", x)
  | v'@NaN -> ("is NaN", { v' })
  | Infinity -> ("is Infinity", { })
  | -Infinity -> { is = "-Infinity" }
and

main =
  traverse print
  [ f 0
  , f (1, 2)
  , f { x = 10 }
  , f (Some [2, 20])
  , f NaN
  , f Infinity
  , f -Infinity
  ]

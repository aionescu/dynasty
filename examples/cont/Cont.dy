module Cont

import Dynasty.Prelude

-- Implementing a Haskell-style ContT monad

return a = \k -> k a and

(<$>) f k = \k' -> k (k' . f) and

(<*>) kf ka = \kb -> kf \f -> ka (kb . f) and

(>>>=) ka f = \kb -> ka \a -> f a kb and

callCC f = \k -> f (\a -> \_ -> k a) k and

liftIO m = (>>=) m and

run k = k and

------------------------------------------------

f x = return (x + 1) and

g x = return (x * 2) and

h x =
  (callCC \exit ->
    case x of
    | 0 -> exit -1
    | _ ->
        f x >>>= \y ->
          g y >>>= \z ->
            return (z * z)
  ) >>>= \r -> liftIO (print (r, r))
and

main = run (h 3) pure

module Fac

import Dynasty.Prelude

-- Self-recursive binding
fac = \case
  | 0 -> 1
  | n -> n * fac (n - 1)
and

-- With fixed points
fac' f = \case
  | 0 -> 1
  | n -> n * f (n - 1)
and

-- Haskell-style `fix`
fix f = let x = f x in x and
facF = fix fac' and

-- Y combinator
y f = let l = \x -> f (x x) in l l and
facY = y fac' and

main =
  do   print (fac 100)
  then print (facF 100)
  then print (facY 100)

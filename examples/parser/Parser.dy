module Parser

import Core.Function
import Core.IO
import Core.Math
import Core.String

return a s = Just (a, s) and
fail _ = Nothing and

satisfy f = \case
  | [] -> Nothing
  | (c :: cs) ->
      case f c of
      | False -> Nothing
      | True -> Just (c, cs)
and

char c = satisfy ((==) c) and

(<|>) a b s =
  case a s of
  | Nothing -> b s
  | a' -> a'
and

(<+>) a b s =
  let pure a = Just a
  and
    (>>=) m f =
      case m of
      | Nothing -> Nothing
      | Just a -> f a
  in
    -- Maybe monad
    do   (a', s') <- a s
    then (b', s'') <- b s'
    then pure ((a', b'), s'')
and

run p = p . chars and

main = print $ run (char "a" <+> (char "b" <|> char "c")) "abc"

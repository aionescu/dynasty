module Parser

import Dynasty.Prelude

chars s =
  let
    l = length s and
    go i = if (i == l) [] (s ! i :: go (i + 1))
  in
    go 0
and

return a s = Just (a, s) and
fail _ = Nothing and

satisfy f = \case
  | [] -> Nothing
  | (c :: cs) ->
      case f c of
      | False -> Nothing
      | True -> Just (c, cs)
and

char c = satisfy ((==) c) and

(<|>) a b s =
  case a s of
  | Nothing -> b s
  | a' -> a'
and

(<+>) a b s =
  case a s of
  | Nothing -> Nothing
  | Just (a', s') ->
      case b s' of
      | Nothing -> Nothing
      | Just (b', s'') -> Just ((a', b'), s'')
and

run p = p . chars and

main = print $ run (char "a" <+> (char "b" <|> char "c")) "abc"
